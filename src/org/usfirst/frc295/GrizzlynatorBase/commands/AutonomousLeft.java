// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc295.GrizzlynatorBase.commands;
import org.usfirst.frc295.GrizzlynatorBase.Robot;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.networktables.*;
/**
 *
 */
public class AutonomousLeft extends CommandGroup //9 + 10
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
//   BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    public AutonomousLeft()
    {
//    	 addSequential(new CmdDriveTrainShiftLowGear());
//         addSequential(new CmdDropIntake());
//         addSequential(new Waypoint(50,0,.7,false));
////         addSequential(new CmdElevatorSwitch());
//         addSequential(new Wait());
//         addSequential(new Waypoint(30,0,.6,false));
//         addSequential(new Wait());
//         addSequential(new Waypoint(0,90,.6,false));
         
    	
        if(Robot.gameData.charAt(0) == 'R')
        {
//      Throw cube
//        	addSequential(new AutonomousDropCube());
        	addSequential(new Waypoint(0,90,.6,false));
        }
        else if(Robot.gameData.charAt(0) == 'L')
        {
        	addSequential(new Waypoint(0,-90,.6,false));

        }
        else
        {
//      Dont throw cube.
        	addSequential(new Waypoint(30,0,.6,false));


        }
    }
    // Called just before this Command runs the first time
    @Override
    protected void initialize()
    {
    }
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() //haha 69
    {
    }
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished()
    {
        return false;
    }
    // Called once after isFinished returns true
    @Override
    protected void end()
    {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted()
    {
    }
}
